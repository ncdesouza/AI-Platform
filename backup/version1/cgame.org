import pygame
import math
from PodSixNet.Connection import ConnectionListener, connection
from time import sleep

class CramGame(ConnectionListener):
	def Network_startgame(self, data):
		self.running = True
		self.num = data["player"]
		self.gameid = data["gameid"]

	def __init__(self):
		self.board = [[False for x in range(5)] for y in range(5)]
		self.initGraphics()

		pygame.init()
		pygame.font.init()
		width, height = 600, 400

		self.screen = pygame.display.set_mode((width, height))
		pygame.display.set_caption("Cram Game")

		self.clock = pygame.time.Clock()
		self.Connect()

		self.gameid = None
		self.num = None

		self.running = False
		while not self.running:
			self.Pump()
			sleep(0.01)
		if self.num == 0:
			self.turn = True
			self.marker = self.greenplayer
			self.othermarker = self.blueplayer
		else:
			self.turn = False
			self.marker = self.blueplayer
			self.othermarker = self.greenplayer
		
	def drawBoard(self):
		for x in range(5):
			for y in range(5):
				self.screen.blit(self.normallineh, [(x)*64+5, (y)*64])
				self.screen.blit(self.normallinev, [(x)*64, (y)*64+5])
		for edge in range(5):
			self.screen.blit(self.normallineh, [edge*64+5, 5*64])
			self.screen.blit(self.normallinev, [5*64, edge*64+5])
		for x in range(6):
			for y in range(6):
				self.screen.blit(self.separators, [x*64, y*64])
		for x in range(5):
			for y in range(5):
				if self.board[y][x]:
					self.screen.blit(self.greenplayer, [(x*64+5), (y)*64+5])
				
	def update(self):
		connection.Pump()
		self.Pump()
		self.clock.tick(60)
		self.screen.fill(0)
		self.drawBoard()


		for event in pygame.event.get():
		 	# quit id the button is pressed
		 	if event.type == pygame.QUIT:
		 		exit()

			mouse = pygame.mouse.get_pos()

		 	x1pos = int(math.ceil(mouse[0])/64.0)
		 	y1pos = int(math.ceil((mouse[1]))/64.0)
		 	#print mouse[0], mouse[1], xpos, ypos

		 	tempboard=self.board
		 	isoutofbounds=False

		 	try:
		 		if not tempboard[y1pos][x1pos]: self.screen.blit(self.greenplayer, [x1pos*64+5, y1pos*64+5])
		 	except:
		 		isoutofbounds=True
		 		pass
		 	if not isoutofbounds:
		 		alreadyplaced=tempboard[y1pos][x1pos]
		 	else:
		 		alreadyplaced=False

		 	if pygame.mouse.get_pressed()[0] and not alreadyplaced and not isoutofbounds:
		 		self.board[y1pos][x1pos]=True
		 		self.Send({"action": "place", "x1":x1pos, "y1":y1pos, "x2":"x2pos", "y2":"y2pos", "num": self.num, "gameid": self.gameid})
		 	for row in self.board:
		 		print row
		 	print ""

		pygame.display.flip()



	def initGraphics(self):
		self.normallinev=pygame.image.load("normalline.png")
		self.normallineh=pygame.transform.rotate(pygame.image.load("normalline.png"), -90)
		self.hoverblocks=pygame.image.load("hoverline.png")
		self.separators=pygame.image.load("separators.png")
		self.redindicator=pygame.image.load("redindicator.png")
		self.greenindicator=pygame.image.load("greenindicator.png")
		self.greenplayer=pygame.image.load("greenplayer.png")
		self.blueplayer=pygame.image.load("blueplayer.png")
		self.winningscreen=pygame.image.load("youwin.png")
		self.gameover=pygame.image.load("gameover.png")
		self.score_panel=pygame.image.load("nscore_panel.png")
bg=CramGame()
while 1:
	bg.update()
